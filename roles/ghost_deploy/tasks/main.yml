
- name: Create Database Persistent Volume
  shell: kubectl apply -f kubectl_files/db/db-pv.yml

- name: Create Database Persistent Volume Claim
  shell: kubectl apply -f kubectl_files/db/db-pvc.yml

- name: Create Database Deployment
  shell: kubectl apply -f kubectl_files/db/db-deployment.yml

- name: Create Database Service
  shell: kubectl apply -f kubectl_files/db/db-service.yml

- name: Create Ghost Persistent Volume
  shell: kubectl apply -f kubectl_files/ghost/ghost-pv.yml

- name: Create Ghost Persistent Volume Claim
  shell: kubectl apply -f kubectl_files/ghost/ghost-pvc.yml

- name: Create Ghost Service
  shell: kubectl apply -f kubectl_files/ghost/ghost-service.yml

- name: Wait for Ghost Service and get his IP
  shell: kubectl get services -l app=ghost -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}'
  register: ghost_ip
  until: ghost_ip.stdout != ""
  retries: 10
  delay: 10

- name: Display Ghost IP
  debug:
    msg: 'Ghost Image IP is: {{ ghost_ip.stdout }}'

- name: Set Ghost IP
  set_fact:
    ghost_ip: "{{ ghost_ip.stdout }}"

- name: Set Ghost URL on 'ghost-deployment.yml' file
  lineinfile:
    path: kubectl_files/ghost/ghost-deployment.yml
    regexp: 'value: http://.*:80/'
    line: '          value: http://{{ ghost_ip }}:80/'
    state: present

- name: Create Ghost Deployment
  shell: kubectl apply -f kubectl_files/ghost/ghost-deployment.yml


- name: Wait for Pod to be ready
  shell: kubectl get pods -l app=ghost
  register: ghost_pod
  until: ghost_pod.stdout.find("1/1") != -1
  retries: 10
  delay: 10

- name: Get MySQL Pod Name
  shell: kubectl get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}'
  register: mysql_pod_name

- name: Set MySQL Pod Name
  set_fact:
    mysql_name_pod: "{{ mysql_pod_name.stdout }}"


- name: Test if Ghost is running
  ansible.builtin.uri:
    url: "http://{{ ghost_ip }}:80/"
    method: GET
    status_code: 200
  register: result
  until: result.status == 200
  retries: 3
  delay: 5
