
## isto Ã© preciso???
#- name: Set GCP Project
#  shell: 'gcloud config set project ghost-ascn-369115'
#
#- name: Create a k8s namespace
#  kubernetes.core.k8s:
#    state: present
#    definition:
#      apiVersion: v1
#      kind: Namespace
#      metadata:
#        name: default
#        labels:
#          app: ghost-namespace
#
#
#- name: Install Ghost Image on GKE
#  shell: 'kubectl create deployment ghost-server --image=ghost:5.14.1'
#  register: ghost_image
#
#- name: Expose Ghost Image on GKE
#  shell: 'kubectl expose deployment ghost-server --type=LoadBalancer --port=2368 --target-port=2368'
#  register: ghost_image_expose
#
#- name: Wait for Ghost Image to be exposed
#  shell: 'kubectl get services'
#  register: ghost_image_ip
#  until: ghost_image_ip.stdout.find("ghost-server") != -1 and ghost_image_ip.stdout.find("<pending>") == -1
#  retries: 10
#  delay: 20
#
#- name: Get Ghost Image IP
#  shell: 'kubectl get services'
#  register: ghost_image_ip
#
#- name: Display Ghost Image IP
#  debug:
#    msg: 'Ghost Image IP is \n{{ghost_image_ip.stdout}}'

#- name: Find GCE Persistent Disks
#  shell: 'gcloud compute disks list'
#  register: EXISTENT_disks
#
#- name: Create MySQL GCE Persistent Disk if not exists
#  shell: 'gcloud compute disks create mysql-disk --size=10GB --zone={{ gcp_zone }}'
#  when: EXISTENT_disks.stdout == "mysql-disk"
#
#- name: Create Ghost GCE Persistent Disk if not exists
#  shell: 'gcloud compute disks create ghost-disk --size=10GB --zone={{ gcp_zone }}'
#  when: EXISTENT_disks.stdout == "ghost-disk"
#
#
#
#- name: Check NameSpace ghost Exists
#  shell: 'kubectl get namespaces | grep {{ghost_namespace}}'
#  register: EXISTENT_namespace
#
#- name: Create GHOST Namespace
#  shell: 'kubectl create namespace ghost'
#  when: EXISTENT_namespace.stdout == {{ghost_namespace}}
#


- name: Create Database Deployment
  shell: 'kubectl apply -f kubectl_files/db/db-deployment.yml'

- name: Create Database PVC & Pod
  shell: 'kubectl apply -f kubectl_files/db/db-pvc-pod.yml'
#
- name: Create Database Service
  shell: 'kubectl apply -f kubectl_files/db/db-service.yml'
#
- name: Create Ghost Deployment
  shell: 'kubectl apply -f kubectl_files/ghost/ghost-deployment.yml'
#
- name: Create Ghost PVC
  shell: 'kubectl apply -f kubectl_files/ghost/ghost-pvc.yml'
##
- name: Create Ghost Service
  shell: 'kubectl apply -f kubectl_files/ghost/ghost-service.yml'
##
##
- name: Wait for Ghost Image to be exposed
  shell: 'kubectl get services'
  register: ghost_image_ip
  until: ghost_image_ip.stdout.find("ghost") != -1 and ghost_image_ip.stdout.find("<pending>") == -1
  retries: 10
  delay: 20
#
- name: Get Ghost Image IP
  shell: 'kubectl get services'
  register: ghost_image_ip
#
- name: Display Ghost Image IP
  debug:
    msg: 'Ghost Image IP is \n{{ghost_image_ip.stdout}}'
#



#- name: Update apt-cache
#  apt:
#    - update_cache: true
#
##sudo mkdir -p /mnt/data
#- name: Create /mnt/data directory
#  become: true
#  file:
#    path: /mnt/data
#    state: directory
#    mode: 0755
#
##kubectl apply -f kubectl_files/persistent-volume.yml
#- name: Create Storage Class and PV objects
#  k8s:
#    state: present
#    definition: "{{ lookup('file', kubectl_files/persistent-volume.yml) }}"
#
#
## DATABASE + MySQL
#- name: Install MySQL
#  tags: db_mysql
#  apt:
#    name: mysql-server
#    state: present
#
##kubectl apply -f kubectl_files/db/db-deployment.yml
#- name: Create Database Deployment
#  tags: db_mysql
#  k8s:
#    state: present
#    definition: "{{ lookup('file', kubectl_files/db/db-deployment.yml) }}"
#
#- name: Create Database PVC
#  tags: db_mysql
#  k8s:
#    state: present
#    definition: "{{ lookup('file', kubectl_files/db/db-pvc.yml) }}"
#
#- name: Create Database Service
#  tags: db_mysql
#  k8s:
#    state: present
#    definition: "{{ lookup('file', kubectl_files/db/db-service.yml) }}"
#
#- name: Insert Blog admin row
#  tags: db_mysql
#  mysql_query:
#    login_db: {{ database_name }}
#    query: UPDATE users SET name=%s, password=%s, email=%s, status='active' where id=1;
#    positional_args:
#    - {{ user_ghost }}
#    - {{ password_ghost }}
#    - {{ email_ghost }}
#
#
#
#
#
#
#
#
#
#swap???????
#
#
##NGINX
#- name: Check if nginx is installed
#  tags: nginx
#  shell: dpkg -l | grep nginx
#  register: nginx_installed
#  ignore_errors: yes
#
#- name: Install nginx
#  tags: nginx
#  apt:
#    name: nginx
#    state: present
#  when: nginx_installed.rc != 0
#
#- name: Remove default nginx config
#  tags: nginx
#  become: true
#  file:
#    path: /etc/nginx/sites-enabled/default
#    state: absent
#  when: nginx_installed.rc != 0
#
#
#
#
#
#
#- name: Install curl
#   tags: ghost_cli
#  become: true
#  apt:
#    name: curl
#    state: present
#
## Install nodejs
#- name: Install nodejs
#  tags: ghost_cli
#  shell: curl -fsSL https://deb.nodesource.com/setup_14.x | \
#        sudo -E bash -; \
#        sudo apt-get install -y nodejs
#
## Install ghost-cli
#- name: Install ghost-cli
#  tags: ghost_cli
#  npm: 
#    - name: ghost-cli
#    - global: true
#
#
#
#
#
#
#
#
##kubectl apply -f kubectl_files/ghost/ghost-deployment.yml
#- name: Create Ghost Deployment
#  k8s:
#    state: present
#    definition: "{{ lookup('file', kubectl_files/ghost/ghost-deployment.yml) }}"
#
#- name: Create Ghost Service
#  k8s:
#    state: present
#    definition: "{{ lookup('file', kubectl_files/ghost/ghost-service.yml) }}"
#
#
#- name: Install Ghost
#  shell: ghost install {{ version_ghost }} --local --no-setup --
#
#- name: Configure Ghost
#  shell: ghost config \
#          --port {{ghost_port}} \
#          --ip {{ghost_ip}} \
#          --db mysql \
#          --dbhost localhost \ # ou o database_host????
#          --dbuser {{database_user}} \
#          --dbpass {{database_password}} \
#          --dbname {{database_name}} \
#
#
#
#
#
#
#// no fim dar notify para dar restart no ghost#