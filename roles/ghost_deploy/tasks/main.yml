
- name: Get GCE Credentials
  shell: gcloud container clusters get-credentials ascn-cluster --zone "{{ gcp_zone }}" --project "{{ gcp_project }}"

- name: Create Database Persistent Volume
  shell: kubectl apply -f kubectl_files/db/db-pv.yml

- name: Create Database Persistent Volume Claim
  shell: kubectl apply -f kubectl_files/db/db-pvc.yml

- name: Update Database Deployment File
  template:
    src: db-deployment.yml
    dest: kubectl_files/db/db-deployment.yml

- name: Create Database Deployment
  shell: kubectl apply -f kubectl_files/db/db-deployment.yml

- name: Create Database Service
  shell: kubectl apply -f kubectl_files/db/db-service.yml

- name: Create Ghost Persistent Volume
  shell: kubectl apply -f kubectl_files/ghost/ghost-pv.yml

- name: Create Ghost Persistent Volume Claim
  shell: kubectl apply -f kubectl_files/ghost/ghost-pvc.yml

- name: Create Ghost Service
  shell: kubectl apply -f kubectl_files/ghost/ghost-service.yml

- name: Wait for Ghost Service to be ready
  shell: kubectl get services -l app=ghost -o jsonpath='{.items[0].status.loadBalancer.ingress[0].ip}'
  register: ghost_ip
  until: ghost_ip.stdout != ""
  retries: 5
  delay: 10

- name: Display Ghost IP
  debug:
    msg: 'Ghost Image IP is: {{ ghost_ip.stdout }}'

- name: Set Ghost IP
  set_fact:
    ghost_ip: "{{ ghost_ip.stdout }}"

- name: Update Ghost Deployment File
  template:
    src: ghost-deployment.yml
    dest: kubectl_files/ghost/ghost-deployment.yml

- name: Create Ghost Deployment
  shell: kubectl apply -f kubectl_files/ghost/ghost-deployment.yml


- name: Wait for Ghost Pod to be ready
  shell: kubectl get pods -l app=ghost
  register: ghost_pod
  until: ghost_pod.stdout.find("1/1") != -1
  retries: 5
  delay: 10

- name: Get MySQL Pod Name
  shell: kubectl get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}'
  register: mysql_pod_name

- name: Set MySQL Pod Name
  set_fact:
    mysql_name_pod: "{{ mysql_pod_name.stdout }}"

- name: Test if Ghost is running
  include_role:
    name: test_ghost

- name: Check Dashboards
  shell: gcloud monitoring dashboards list --filter="displayName=Ghost_Monitoring"
  register: output_dashboard

- name: Update Dashboard File
  template:
    src: dashboard.yml
    dest: dashboard.json

- name: Create Dashboard
  shell: gcloud monitoring dashboards create --config-from-file=dashboard.json
  when: output_dashboard.stdout == ""